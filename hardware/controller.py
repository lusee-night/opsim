from hardware.panels import *
# ---
class Controller:
    profile = None# If set, represents the time series for the power generated by the panels

    # ---
    def __init__(self, env=None, sun = None, verbose = False):
        self.env        = env
        self.sun        = sun
        self.verbose    = verbose
    
        self.panels     = []
        self.devices    = {}
        self.power      = None # this is calculated later

    ### PANELS SECTION ###
    def add_panel(self, panel):
        panel.set_condition(self.sun.condition)
        self.panels.append(panel)

    ### DEVICES SECTION ###
    def add_device(self, device):
        self.devices[device.name]=device

    # ---
    def set_device_state(self, name, state):
        self.devices[name].state = state

    ### ---
    def add_panels_from_config(self, config):
        pcf     = config['config'] # panel config
        panels  = config['panels'] # list of panels
    
        lander = np.array([float(x) for x in pcf['lander'].split()])

        if self.verbose: print(f'''Lander pitch, roll, yaw: {lander}''')

        pvEFF_T = np.array([float(x) for x in pcf['PV_efficiency']['temp'].split()])
        pvEFF_P = np.array([float(x) for x in pcf['PV_efficiency']['power'].split()])

        for panel_name in panels:
            panel = panels[panel_name]
            normal = np.array([float(x) for x in panel['normal'].split()])
            eff = panel['efficiency']*pcf['efficiency_all']
            if self.verbose: print(f'''Adding panel {panel_name} with normal {normal}, \tefficiency {eff}, and surface area {panel['area']}''')

            self.add_panel(Panel(self.sun, name=panel_name, lander=lander, normal=normal, env=self.env, area=panel['area'], pvEFF_T=pvEFF_T, pvEFF_P=pvEFF_P, efficiency_mult=eff))

    ### ---
    def get_panel(self, name):
        for p in self.panels:
            if p.name==name: return p
        return None
    ### ---
    def panels_info(self):
        info = f'''Number of panels: {len(self.panels)}\n'''
        for p in self.panels:
            info += f'''Panel info: {p.info()}\n'''
        print(info)

    
    ###
    # An aggregator, to collect power from the panels
    def calculate_power(self):
        power = None
        for p in self.panels:
    
            if power is None:
                power = p.power()
            else:
                power = power + p.power()

        self.power = power

